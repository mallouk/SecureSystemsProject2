#!/bin/bash

#Can't generate server cert without CA cert
if [ ! -d "ca" ]; then
    echo "You must generate your CA's certs before running this script."
    exit 1
fi

rm -rf server
mkdir -p server
mkdir -p server/files

#Define vars
OPENSSLFILE_CA=securesysCA
OPENSSLFILE_SERVER=securesysServer

#Generate server key
echo "Generating Web Server's Key..."
openssl genrsa -des3 -out ./server/${OPENSSLFILE_SERVER}.key 1024 -config ./openssl.cnf

#Generate server cert request
echo ""
echo "Generating Web Server Cert Request..."
openssl req -new -key ./server/${OPENSSLFILE_SERVER}.key -out ./server/${OPENSSLFILE_SERVER}.csr -config ./openssl.cnf

#Generate server cert
echo ""
echo "Signing Web Server's Key with CA key..."
openssl ca -days 365 -in ./server/${OPENSSLFILE_SERVER}.csr -cert ./ca/${OPENSSLFILE_CA}.crt -keyfile ./ca/${OPENSSLFILE_CA}.key -out ./server/${OPENSSLFILE_SERVER}.crt -config ./openssl.cnf

#Update server key permission
chmod ugo-rwx,u+r server/${OPENSSLFILE_SERVER}.key

#Create file for server public key to be used in the python encryption of the metadata file
openssl x509 -pubkey -noout -in securesysServer.crt > server/public_server.key
